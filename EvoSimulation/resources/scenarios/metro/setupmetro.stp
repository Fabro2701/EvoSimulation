
global := g(){
			let diagramABC = (static "state_diagram.Diagram").forName("");
			diagramABC.load("resources/scenarios/metro/rutaABC.json");
			let diagramADE = (static "state_diagram.Diagram").forName("");
			diagramADE.load("resources/scenarios/metro/rutaADE.json");
			let diagramFCD = (static "state_diagram.Diagram").forName("");
			diagramFCD.load("resources/scenarios/metro/rutaFCD.json");
			let diagramACDEFB = (static "state_diagram.Diagram").forName("");
			diagramACDEFB.load("resources/scenarios/metro/rutaACDEFB.json");
			let diagramABFEDC = (static "state_diagram.Diagram").forName("");
			diagramABFEDC.load("resources/scenarios/metro/rutaABFEDC.json");
			
			let trainCapacity = 1500;
			let routeManager = new "experiment.models.metro.RouteManager"();
		  }.
		  
init := initactive("simulator.model.entity.ActiveEntity"){
				this.setAttribute("info","train");
				this.setAttribute("current","none");
				/*this.setAttribute("dest","A");*/
				let map = (static "util.Util").createMap();
				map.put("e",this);
				this.setAttribute("map",map);
				
				let route = this.getAttribute("route");
				(static "util.Util").printlnString(route);
				if(route.equals("ABC")){
					let flow = diagramABC.createFlow("experiment.models.metro.");
					this.setAttribute("flow",flow);
				}
				else if(route.equals("ADE")){
					let flow = diagramADE.createFlow("experiment.models.metro.");
					this.setAttribute("flow",flow);
				}
				else if(route.equals("FCD")){
					let flow = diagramFCD.createFlow("experiment.models.metro.");
					this.setAttribute("flow",flow);
				}
				else if(route.equals("ACDEFB")){
					let flow = diagramACDEFB.createFlow("experiment.models.metro.");
					this.setAttribute("flow",flow);
				}
				else{
					let flow = diagramABFEDC.createFlow("experiment.models.metro.");
					this.setAttribute("flow",flow);
				}
				routeManager.signIn(route);
		   		
			    this.setAttribute("passengers",new "experiment.models.metro.PassengerController"(routeManager));
			    this.setAttribute("congestion",0);
		}
		initStation("simulator.model.entity.PasiveEntity"){
			this.setAttribute("passengers",new "experiment.models.metro.PassengerController"(routeManager));
		}.
updates := 
		   updateMov("simulator.model.entity.ActiveEntity"){
		   			(this.getAttribute("flow")).step(this.getAttribute("map"));
		   			let dir = this.getAttribute("dest");
		   			let dirEntity = this.getEntityRandomAttribute((this.getCtrl()).getSimulator(),dir);
		   			
		   			let node = this.nextNodeStraightTowards(simulator.getMap(), dirEntity);
					if(node != null)this.setNode(node);
		   }
		   updateCongestion(73)("simulator.model.entity.PasiveEntity"){
		   		let m = simulator.getTime() % 24;
		   		let y = (static "experiment.models.metro.Util").getStationDistribution(m);
		   		
		   		y = y/10;
				
				let station = this.getAttribute("station");
				let connections = routeManager.connections(station);
				if(!station.equals("A"))(this.getAttribute("passengers")).addPassengers("A",y/connections);
				if(!station.equals("B"))(this.getAttribute("passengers")).addPassengers("B",y/connections);
				if(!station.equals("C"))(this.getAttribute("passengers")).addPassengers("C",y/connections);
				if(!station.equals("D"))(this.getAttribute("passengers")).addPassengers("D",y/connections);
				if(!station.equals("E"))(this.getAttribute("passengers")).addPassengers("E",y/connections);
				if(!station.equals("F"))(this.getAttribute("passengers")).addPassengers("F",y/connections);
		   }.      

interactions := 
				towardsStateInteraction(50)("simulator.model.entity.ActiveEntity"->"simulator.model.entity.PasiveEntity"){
					let station = e2.getAttribute("station");
				
					this.setAttribute("current",station);
					
					let passengers = this.getAttribute("passengers");
					let route = this.getAttribute("route");
					let passengers2 = e2.getAttribute("passengers");
					passengers2.transfer(passengers,route, trainCapacity-passengers.total());
					passengers.liberate(passengers2,e2.getAttribute("station"),route);
				}.