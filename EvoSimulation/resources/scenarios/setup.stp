grammars := action(-1); "grammar.StandardGrammar"; "resources/scenarios/obesidad/obesidad_acts.bnf".

global := a(){
			let mu = 60*52;
			let beta = 0.001121;
			let gamma = 0.0003226;
			let p1 = 0.020;
			let p2 = 0.042;
			let pe = 1/7;
			let e1 = 0.004;
			let e2 = 0.024;
			let N0 = 0.704;
			let S0 = 0.39;
			let O0 = 0.16;
			
			let diabetesDeathProb = 0.0001;
			
			let diagramMovs = new "state_diagram.Diagram"();
			diagramMovs.load("resources/scenarios/obesidad/movsFSM.json");
		  }.
init := initactiveImc("simulator.model.entity.individuals.MyIndividual"){
			this.setAttribute("current","none");
			  let map = (static "util.Util").createMap();
			map.put("e",this);
			this.setAttribute("map",map);
			let flowMovs = diagramMovs.createFlow("experiment.models.obesidad.");
			this.setAttribute("flowMovs",flowMovs);
			  
			  let p = (static "simulator.RandomSingleton").nextFloat();
			  if(p<=O0){
			  	this.setAttribute("imc","O");
			  }
			  else if(p<=S0+O0){
			  	this.setAttribute("imc","S");
			  }
			  else{
			  	this.setAttribute("imc","N");
			  }
		}
		initactiveDiabetes("simulator.model.entity.individuals.MyIndividual"){
			  this.setAttribute("diabetes", false);
			  tree(resources/others/tree.txt,NO,SI)
			  let p = (static "simulator.RandomSingleton").nextFloat();
			  if(p<(SI/(SI+NO))){
					this.setAttribute("diabetes", true);
					this.notifyEvent("diabetes");
				}
		}
		initactiveAge("simulator.model.entity.individuals.MyIndividual"){
			let p = (static "simulator.RandomSingleton").nextGaussian();
			p = (p*7.0+35.6)*52;
			this.setAttribute("age", p); 
	 	}
		initpasive("simulator.model.entity.PasiveEntity"){
			
			 
	 	}
		initSetBuildings("simulator.model.entity.individuals.MyIndividual"){
			if(!this.hasAttribute("house")){
				let house = this.getEntityRandomAttribute((this.getCtrl()).getSimulator(),"house");
				this.setAttribute("house",house);
			}
			if(!this.hasAttribute("supermarket")){
				let supermarket = this.getEntityRandomAttribute((this.getCtrl()).getSimulator(),"supermarket");
				this.setAttribute("supermarket",supermarket);
			}
			if(!this.hasAttribute("bar")){
				let bar = this.getEntityRandomAttribute((this.getCtrl()).getSimulator(),"bar");
				this.setAttribute("bar",bar);
			}
			if(!this.hasAttribute("restaurant")){
				let restaurant = this.getEntityRandomAttribute((this.getCtrl()).getSimulator(),"restaurant");
				this.setAttribute("restaurant",restaurant);
			}
		}.
updates :=  update_diabetes(2)("simulator.model.entity.individuals.MyIndividual"){
			
				let p = (static "simulator.RandomSingleton").nextFloat();
				if(this.hasAttribute("diabetes")&&this.getAttribute("diabetes")){
					if(p<diabetesDeathProb){
						this.notifyEvent("diabetes death");
						this.dispose();
					}
				}
				/*else{
					file(resources/scenarios/obesidad/poly_rules.txt);
				}*/
		    }
			update1("simulator.model.entity.individuals.MyIndividual"){
				
				let imc = this.getAttribute("imc");
				let p = (static "simulator.RandomSingleton").nextDouble();
				if(imc.equals("S")){
					if(p<=gamma){
						this.setAttribute("imc","O");
						this.notifyEvent("self_S_to_O");
					}
				}
				
				
		   }
			updateGenes("simulator.model.entity.individuals.MyIndividual"){
				let imc = this.getAttribute("imc");
				let p = (static "simulator.RandomSingleton").nextDouble();
				if((this.getPhenotype()).hasGene("gen1") && p<=0.003){
					if(imc.equals("N")){
						this.setAttribute("imc","S");
					}
					else if(imc.equals("S")){
						this.setAttribute("imc","O");
					}
				}
				if(this.getAttribute("age")>=mu){
					this.dispose();
				}
			}
		   
		  updateMov("simulator.model.entity.individuals.MyIndividual"){
					(this.getAttribute("flowMovs")).step(this.getAttribute("map"));
					let dir = this.getAttribute("dest");
					let node = this.nextNodeTowards(simulator.getMap(), this.getAttribute(dir));
					if(node != null)this.setNode(node);
				}
		   update2("simulator.model.entity.individuals.MyIndividual"){
				let imc = this.getAttribute("imc");
				let p = (static "simulator.RandomSingleton").nextDouble();
				let sn = p1*p2*pe;
				let os = e1*e2*pe;
				if(imc.equals("S")){
					if(p<=sn){
						this.setAttribute("imc","N");
						this.notifyEvent("self_S_to_N");
					}
				}
				else if(imc.equals("O")){
					if(p<=os){
						this.setAttribute("imc","S");
						this.notifyEvent("self_O_to_S");
					}
				}
		   }.
actions := <action> NOTHING{
		   					;
		   				   }.  
interactions := imcInteraction(2)("simulator.model.entity.individuals.MyIndividual"->"simulator.model.entity.individuals.MyIndividual"){
					
						let imc1 = this.getAttribute("imc");
						let imc2 = e2.getAttribute("imc");
						let p = (static "simulator.RandomSingleton").nextDouble();
						if(imc1.equals("N")&&((imc2.equals("S")||imc2.equals("O")))){
							if(p<=beta){
								this.setAttribute("imc","S");
								this.notifyEvent("intc_N_to_S");
							}
						}	
					
				}
				towardsStateInteraction("simulator.model.entity.individuals.MyIndividual"->"simulator.model.entity.PasiveEntity"){
					let info = e2.getAttribute("info");
					this.setAttribute("current",info);
				}
				
				/*rep(100)("simulator.model.entity.individuals.MyIndividual"->"simulator.model.entity.individuals.MyIndividual"){
					let p = (static "simulator.RandomSingleton").nextDouble();
					
					if(p<=0.001)this.reproduce(e2);
				}*/
				.