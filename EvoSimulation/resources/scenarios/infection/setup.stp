global := 
		a(){
			let initInfectionProb = 0.1;
			let infectionProb = 0.1;
			let infectiondeathProb = 0.001;
			let recoveryProb = 0.001;
			let lossinmuneProb = 0.0001;
			let vaccinationProb = 0.00000;
			
			let diagramInfection = new "state_diagram.Diagram"();
			diagramInfection.load("resources/scenarios/infection/infectionFSMmod.json");
			let diagramMovs = new "state_diagram.Diagram"();
			diagramMovs.load("resources/scenarios/infection/movsFSM.json");
		}.
		  
init := 
		initactive("simulator.model.entity.ActiveEntity"){
			this.setAttribute("current","none");
			this.setAttribute("status","none");
			this.setAttribute("vaccinated",false);
			
			let map = (static "util.Util").createMap();
			map.put("e",this);
			this.setAttribute("map",map);
				
			let p = (static "simulator.RandomSingleton").nextFloat();
			if(p<initInfectionProb){
				this.setAttribute("status","infected");
			}
			let flowInfection = diagramInfection.createFlow("experiment.models.infection.");
			this.setAttribute("flowInfection",flowInfection);
			let flowMovs = diagramMovs.createFlow("experiment.models.infection.");
			this.setAttribute("flowMovs",flowMovs);
		}
		initSetBuildings("simulator.model.entity.ActiveEntity"){
			if(!this.hasAttribute("house")){
				let house = this.getEntityRandomAttribute((this.getCtrl()).getSimulator(),"house");
				this.setAttribute("house",house);
			}
			if(!this.hasAttribute("supermarket")){
				let supermarket = this.getEntityRandomAttribute((this.getCtrl()).getSimulator(),"supermarket");
				this.setAttribute("supermarket",supermarket);
			}
			if(!this.hasAttribute("bar")){
				let bar = this.getEntityRandomAttribute((this.getCtrl()).getSimulator(),"bar");
				this.setAttribute("bar",bar);
			}
			if(!this.hasAttribute("restaurant")){
				let restaurant = this.getEntityRandomAttribute((this.getCtrl()).getSimulator(),"restaurant");
				this.setAttribute("restaurant",restaurant);
			}
		}.
updates := 
		updateVaccination(100)("simulator.model.entity.ActiveEntity"){
			let p = (static "simulator.RandomSingleton").nextFloat();
			if(p<vaccinationProb){
				this.setAttribute("vaccinated",true);
			}
			
		}
		updateInfectionFSM(10)("simulator.model.entity.ActiveEntity"){
			(this.getAttribute("flowInfection")).step(this.getAttribute("map"));
		}
		updateMov("simulator.model.entity.ActiveEntity"){
			(this.getAttribute("flowMovs")).step(this.getAttribute("map"));
			let dir = this.getAttribute("dest");
			let node = this.nextNodeTowards(simulator.getMap(), this.getAttribute(dir));
			if(node != null)this.setNode(node);
		}.
interactions := 
		infectionInteraction("simulator.model.entity.ActiveEntity"->"simulator.model.entity.ActiveEntity"){
			let p = (static "simulator.RandomSingleton").nextDouble();
			if((this.getAttribute("status")).equals("infected")){
			    if((e2.getAttribute("status")).equals("healthy") && p < infectionProb){
					e2.setAttribute("status", "infected");
				}
			}			
		}
		towardsStateInteraction("simulator.model.entity.ActiveEntity"->"simulator.model.entity.PasiveEntity"){
			let info = e2.getAttribute("info");
			this.setAttribute("current",info);
		}.