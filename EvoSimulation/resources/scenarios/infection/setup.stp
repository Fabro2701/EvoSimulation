
global := a(){
			let mu = 60*520;
			let initInfectionProb = 0.1;
			let infectionProb = 1.01;
			let infectiondeathProb = 0.00;
			let recoveryProb = 0.001;
			let lossinmuneProb = 0.001;
			
			let diagramInfection = new "state_diagram.Diagram"();
			diagramInfection.load("resources/scenarios/infection/infectionFSM.json");
			let diagramMovs = new "state_diagram.Diagram"();
			diagramMovs.load("resources/scenarios/infection/movsFSM.json");
		  }.
		  
init := initactive("simulator.model.entity.ActiveEntity"){
			  
				this.setAttribute("current","none");
				this.setAttribute("status","none");
			  
			  let map = (static "util.Util").createMap();
				map.put("e",this);
				this.setAttribute("map",map);
				
				let p = (static "simulator.RandomSingleton").nextFloat();
				if(p<initInfectionProb){
					this.setAttribute("status","infected");
				}
				let flowInfection = diagramInfection.createFlow("experiment.models.infection.");
				this.setAttribute("flowInfection",flowInfection);
				let flowMovs = diagramMovs.createFlow("experiment.models.infection.");
				this.setAttribute("flowMovs",flowMovs);
				
		}
		initactiveAge("simulator.model.entity.ActiveEntity"){
			/*let p = (static "simulator.RandomSingleton").nextGaussian();
			p = (p*7.0+35.6)*52;
			this.setAge(p);*/
					 
	 	}.
updates := updateInfectionFSM(10)("simulator.model.entity.ActiveEntity"){
				
				(this.getAttribute("flowInfection")).step(this.getAttribute("map"));
				(this.getAttribute("flowMovs")).step(this.getAttribute("map"));
		
				if(this.getAge()>=mu){
					this.dispose();
				}
				
		   }
		   updateSetBuildings("simulator.model.entity.ActiveEntity"){
				if(!this.hasAttribute("house")){
			    	let house = this.getEntityRandomAttribute((this.getCtrl()).getSimulator(),"house");
			    	this.setAttribute("house",house);
			    }
			    if(!this.hasAttribute("supermarket")){
			    	let supermarket = this.getEntityRandomAttribute((this.getCtrl()).getSimulator(),"supermarket");
			    	this.setAttribute("supermarket",supermarket);
			    }
			    if(!this.hasAttribute("bar")){
			    	let bar = this.getEntityRandomAttribute((this.getCtrl()).getSimulator(),"bar");
			    	this.setAttribute("bar",bar);
			    }
			    if(!this.hasAttribute("restaurant")){
			    	let restaurant = this.getEntityRandomAttribute((this.getCtrl()).getSimulator(),"restaurant");
			    	this.setAttribute("restaurant",restaurant);
			    }
		   }
		   updateMov("simulator.model.entity.ActiveEntity"){
		   			(this.getAttribute("flowMovs")).step(this.getAttribute("map"));
		   			let dir = this.getAttribute("dest");
		   			/*(static "util.Util").printlnString(dir);*/
		   			let node = this.nextNodeTowards(simulator.getMap(), this.getAttribute(dir));
					if(node != null)this.setNode(node);
		   }
		   .

interactions := infectionInteraction("simulator.model.entity.ActiveEntity"->"simulator.model.entity.ActiveEntity"){
	
					let p = (static "simulator.RandomSingleton").nextDouble();
					if((this.getAttribute("status")).equals("infected")){
					    if((e2.getAttribute("status")).equals("healthy") && p < infectionProb){
							e2.setAttribute("status", "infected");
						}
					}			
				}
				towardsStateInteraction("simulator.model.entity.ActiveEntity"->"simulator.model.entity.PasiveEntity"){
					let info = e2.getAttribute("info");
					/*(static "util.Util").printlnString(info);*/
					this.setAttribute("current",info);
				}.