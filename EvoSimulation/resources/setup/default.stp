grammars := move;   "grammar.StandardGrammar"; "resources/loads/grammars/obesidad.bnf"|
			action; "grammar.StandardGrammar"; "resources/loads/grammars/obesidad_acts.bnf".

global := a{
			let mu = 0.0004578;
			let beta = 0.001121;
			let gamma = 0.0003226;
			let p1 = 0.020;
			let p2 = 0.042;
			let p = 1/7;
			let e1 = 0.004;
			let e2 = 0.024;
			let N0 = 0.704;
			let S0 = 0.39;
			let O0 = 0.16;
		  }.	
init := init1{
			  let p = (static "simulator.RandomSingleton").nextFloat();
			  if(p<=O0){
			  	e.setAttribute("imc","O");
			  }
			  else if(p<=S0+O0){
			  	e.setAttribute("imc","S");
			  }
			  else{
			  	e.setAttribute("imc","N");
			  }
			 }.
updates := update1{
			let imc = e.getAttribute("imc");
			let p = (static "simulator.RandomSingleton").nextDouble();
			if(imc.equals("S")){
				if(p<=gamma){
					e.setAttribute("imc","O");
				}
			}
			p = (static "simulator.RandomSingleton").nextDouble();
			
			if(p<=mu){
				e.vanish();
			}
		   }
		   update2{
			let imc = e.getAttribute("imc");
			let p = (static "simulator.RandomSingleton").nextDouble();
			let sn = p1*p2*p;
			let os = e1*e2*p;
			if(imc.equals("S")){
				if(p<=sn){
					e.setAttribute("imc","N");
				}
			}
			else if(imc.equals("O")){
				if(p<=os){
					e.setAttribute("imc","S");
				}
			}
		   }.
actions := <move> UP{
					 if(e.node.y > 0 && (map.getNodeAt(e.node.x, e.node.y-1)).type == enum "simulator.Constants$NODE_TYPE.LAND"){
					 	e.node.setY(e.node.y-1);
					 }
				  }
				  DOWN{
					 if(e.node.y < map.HEIGHT-1 && (map.getNodeAt(e.node.x, e.node.y+1)).type == enum "simulator.Constants$NODE_TYPE.LAND"){
					 	e.node.setY(e.node.y+1);
					 }
				  }
				  RIGHT{
					 if(e.node.x < map.WIDTH-1 && (map.getNodeAt(e.node.x+1, e.node.y)).type == enum "simulator.Constants$NODE_TYPE.LAND"){
					 	e.node.setX(e.node.x+1);
					 }
				  }
				  LEFT{
				     if(e.node.x > 0 && (map.getNodeAt(e.node.x-1, e.node.y)).type == enum "simulator.Constants$NODE_TYPE.LAND"){
					 	e.node.setX(e.node.x-1);
					 }
				  }
				  NEUTRAL{
				  		  let t = new simulator.model.evaluation.ActionEvaluator$TestEv();
				  		  test.testi(t);
				  		  test.testi(test);
				  		  test.i;
				  }|
		   <action> NOTHING{;}.  
interactions := OS_INTERACTION{
					let imc1 = e1.getAttribute("imc");
					let imc2 = e2.getAttribute("imc");
					let p = (static "simulator.RandomSingleton").nextDouble();
					if(imc1.equals("N")&&((imc2.equals("S")||imc2.equals("O")))){
						if(p<=beta){
							e1.setAttribute("imc","S");
						}
					}
				}.