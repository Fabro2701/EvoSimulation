grammars := move;   "grammar.StandardGrammar"; "resources/loads/grammars/default.bnf"|
			action; "grammar.StandardGrammar"; "resources/loads/grammars/default2.bnf".
	
init := init1{
			  let p = (static "simulator.RandomSingleton").nextFloat();
			  if(p<=0.046f){
			  	e.setAttribute("imc","O");
			  }
			  else if(p<=0.25f){
			  	e.setAttribute("imc","S");
			  }
			  else{
			  	e.setAttribute("imc","N");
			  }
			 }.
updates := update1{
			let imc = e.getAttribute("imc");
			let p = (static "simulator.RandomSingleton").nextDouble();
			if(imc.equals("S")){
				if(p<=0.3226f){
					e.setAttribute("imc","O");
					(static "util.Util").prinlnString("OOOOOO");
				}
			}
		   }.
actions := <move> UP{
					 if(e.node.y > 0 && (map.getNodeAt(e.node.x, e.node.y-1)).type == enum "simulator.Constants$NODE_TYPE.LAND"){
					 	e.node.setY(e.node.y-1);
					 }
				  }
				  DOWN{
					 if(e.node.y < map.HEIGHT-1 && (map.getNodeAt(e.node.x, e.node.y+1)).type == enum "simulator.Constants$NODE_TYPE.LAND"){
					 	e.node.setY(e.node.y+1);
					 }
				  }
				  RIGHT{
					 if(e.node.x < map.WIDTH-1 && (map.getNodeAt(e.node.x+1, e.node.y)).type == enum "simulator.Constants$NODE_TYPE.LAND"){
					 	e.node.setX(e.node.x+1);
					 }
				  }
				  LEFT{
				     if(e.node.x > 0 && (map.getNodeAt(e.node.x-1, e.node.y)).type == enum "simulator.Constants$NODE_TYPE.LAND"){
					 	e.node.setX(e.node.x-1);
					 }
				  }
				  NEUTRAL{
				  		  let t = new simulator.model.evaluation.ActionEvaluator$TestEv();
				  		  test.testi(t);
				  		  test.testi(test);
				  		  test.i;
				  }|
		   <action> ATTACK{;}
		   			REPRODUCTION{;}
		   			 REST{;}.  
interactions := EAT{
				;
				}
		   		IDK{;}.